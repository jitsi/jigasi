<?xml version="1.0" encoding="UTF-8"?>
<project name="jigasi" xmlns:maven-artifact="antlib:org.apache.maven.artifact.ant">

    <!--
    Requires maven-ant-tasks to maintain this project's dependencies in Maven's
    pom.xml only and have the latter fetch them when necessary so that we don't
    have to commit dependent binaries in this project's repository.

    To install maven-ant-tasks locally, run the following once:
    mvn dependency:get -DartifactId=maven-ant-tasks -DgroupId=org.apache.maven -Dversion=2.1.3

    Then invoke Ant with the -lib command line argument pointing to the
    directory which contains maven-ant-tasks as follows:
    ant -lib ~/.m2/repository/org/apache/maven/maven-ant-tasks/2.1.3 [target]
    -->

    <property file="local.properties" />
    <property name="jitsi.path" value="../jitsi" />
    <property name="src" value="src/main/java" />
    <property name="src.test" value="src/test/java" />
    <property name="output" value="classes" />
    <property name="output.test" value="test-classes" />
    <property name="run.arg.line" value="" />
    <property name="run.jvmarg.line" value="" />
    <property name="dist" value="dist" />
    <property name="doc" value="doc"/>
    <property name="java.doc" value="${doc}/api"/>
    <property name="junit.reports" value="junit-reports"/>

    <property name="debian.target.dir" value="release/jigasi" />


    <condition property="label" value="build.SVN">
        <not>
            <isset property="label"/>
        </not>
    </condition>

    <maven-artifact:dependencies pathId="compile.classpath" useScope="compile">
        <pom file="pom.xml" />
    </maven-artifact:dependencies>
    <maven-artifact:dependencies filesetId="runtime.fileset"
             pathId="runtime.classpath" useScope="runtime">
        <pom file="pom.xml" />
    </maven-artifact:dependencies>
    <path id="run.classpath">
        <path refid="runtime.classpath" />
        <pathelement location="${output}" />
    </path>
    <maven-artifact:dependencies pathId="test.classpath" useScope="test">
        <pom file="pom.xml" />
    </maven-artifact:dependencies>
    <path id="run.test.classpath">
        <path refid="test.classpath" />
        <pathelement location="${output.test}" />
    </path>

    <target name="clean">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${output}" />
            <fileset dir="${output.test}" />
            <fileset dir="${dist}" />
            <fileset dir="${doc}" />
            <fileset dir="${junit.reports}" />
            <fileset dir="release" />
            <fileset includes="jigasi.jar" dir="." />
        </delete>
    </target>

    <target name="compile">
        <mkdir dir="${output}" />
        <javac
            classpathref="compile.classpath"
            destdir="${output}"
            debug="true"
            fork="true"
            source="1.8"
            srcdir="${src}"
            target="1.8" />
    </target>

    <target name="compile-test" depends="compile">
        <mkdir dir="${output.test}" />
        <javac
                classpathref="test.classpath"
                destdir="${output.test}"
                debug="true"
                fork="true"
                source="1.8"
                srcdir="${src.test}"
                target="1.8" />
    </target>

    <target name="run">
        <condition property="run.lib.native" value="windows-64">
            <os arch="amd64" family="windows" />
        </condition>
        <condition property="run.lib.native" value="windows">
            <os arch="i386" family="windows" />
        </condition>
        <condition property="run.lib.native" value="macosx">
            <os family="mac" />
        </condition>
        <condition property="run.lib.native" value="linux-64">
            <and>
                <equals
                        arg1="${os.name}"
                        arg2="linux"
                        casesensitive="false"
                        trim="true"/>
                <os arch="amd64" />
            </and>
        </condition>
        <condition property="run.lib.native" value="linux">
            <and>
                <equals
                        arg1="${os.name}"
                        arg2="linux"
                        casesensitive="false"
                        trim="true"/>
                <os arch="i386" />
            </and>
        </condition>
        <condition
                else=""
                property="run.java.library.path"
                value="-Djava.library.path=${basedir}/lib/native/${run.lib.native}">
            <isset property="run.lib.native"/>
        </condition>
        <java
                classname="org.jitsi.jigasi.Main"
                classpathref="run.classpath"
                failonerror="true"
                fork="true" >
            <jvmarg line="${run.java.library.path} ${run.jvmarg.line}" />
            <arg line="${run.arg.line}" />
        </java>
    </target>

    <target name="test" depends="compile-test">
        <mkdir dir="${junit.reports}"/>
        <junit printsummary="yes" haltonfailure="true" fork="true" forkmode="once">
            <formatter type="xml" />
            <classpath refid="run.test.classpath"/>
            <sysproperty
                    key="java.library.path"
                    path="lib/native/linux-64:lib/native/linux:lib/native/mac:lib/native/windows-64:lib/native/windows" />
            <test name="JigasiTestSuite"
                  todir="${junit.reports}"/>
        </junit>
    </target>

    <target name="jar" depends="compile">
        <jar
            compress="true"
            destfile="jigasi.jar">
            <fileset casesensitive="no" dir="${output}">
                <include name="**/*.class" />
                <include name="**/*.properties" />
                <exclude name="${output}/jigasi.jar" />
            </fileset>
            <fileset dir="src/main/resources">
                <include name="**/*.opus"/>
            </fileset>
        </jar>
    </target>

    <target
        name="make"
        depends="compile,jar"
        description="Incrementally compile and jar/package the project." />

    <target
        name="rebuild"
        depends="clean,make"
        description="Clean and make the project." />

    <!-- JAVADOC -->
    <target name="javadoc"
        description="Generates project javadoc.">
        <javadoc author="true" destdir="${java.doc}" package="true"
            version="true" use="true" windowtitle="Jitsi API"
            classpathref="compile.classpath" source="1.5+" maxmemory="256m">
            <packageset dir="${src}">
                <include name="**"/>
            </packageset>
            <tag name="todo" description="To do:"/>
            <tag name="note" description="Note:"/>
            <link href="${j2se_api}" />
            <header>
                <![CDATA[
                <b> Jitsi: the OpenSource Java VoIP and Instant Messaging client. </b>
                ]]>
            </header>
            <bottom>
                <![CDATA[
                <font size="-1">
                    <a href="http://jitsi.org"> Jitsi, the OpenSource Java VoIP and Instant Messaging client. </a>
                    <br>
                        <a href="http://gnu.org"> Distributable under LGPL license. </a>
                    <br>
                </font>
                ]]>
            </bottom>
        </javadoc>
    </target>

    <!-- The path to the dpkg-buildpackage tool -->
    <property name="dpkg-buildpackage" value="/usr/bin/dpkg-buildpackage"/>
    <!-- The path to the dh_testdir tool -->
    <property name="dh_testdir" value="/usr/bin/dh_testdir"/>

    <!-- Can we build debian packages? -->
    <condition property="dpkg.build.present">
      <and>
        <available file="${dpkg-buildpackage}"/>
        <available file="${dh_testdir}"/>
      </and>
    </condition>

    <!-- Outputs a warning notifying the user that a dpkg tool is missing. -->
    <target name="dpkg-build-warning" unless="dpkg.build.present">
        <echo message="Either the ${dpkg-buildpackage} tool or the debhelper tools was not found on your system."/>
        <echo message="Try installing the 'dpkg-dev' and 'debhelper' packages"/>
    </target>

    <target name="deb" depends="make,deb-copy-jigasi,deb-32,deb-64"/>
    <target name="deb-32">
        <antcall target="make-deb">
            <param name="deb-arch" value="i386"/>
        </antcall>
    </target>
    <target name="deb-64">
        <antcall target="make-deb">
            <param name="deb-arch" value="amd64"/>
        </antcall>
    </target>

    <!-- Builds the debian package. -->
    <target name="make-deb"
            if="dpkg.build.present"
            depends="dpkg-build-warning">

        <!-- Build binary .deb package -->
        <exec executable="${dpkg-buildpackage}" dir="${debian.target.dir}">
            <arg value="-tc"/>
            <arg value="-us"/>
            <arg value="-uc"/>
            <arg value="-b"/>
            <arg value="-d"/>
            <arg value="-a${deb-arch}"/>
        </exec>

    </target>

    <target name="deb-copy-jigasi" depends="copy-runtime-dependencies-from-maven">
        <!-- create jitsi copy to work on it -->
        <mkdir dir="${debian.target.dir}"/>

        <copy todir="${debian.target.dir}/debian">
            <fileset dir="debian">
                <include name="**/*"/>
                <exclude name="changelog.tmpl"/>
            </fileset>
        </copy>
        <copy todir="${debian.target.dir}/src">
            <fileset dir="src">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${debian.target.dir}/jigasi-home">
            <fileset dir="jigasi-home">
                <include name="**/*"/>
            </fileset>
        </copy>
        <!-- callstats-java-sdk -->
        <replace file="${debian.target.dir}/jigasi-home/log4j2.xml"
                 token="logs">
            <replacevalue>/var/log/jitsi</replacevalue>
        </replace>

        <copy todir="${debian.target.dir}/lib">
            <fileset dir="lib">
                <include name="**/*"/>
                <exclude name="**/macosx/**"/>
                <exclude name="**/windows*/**"/>
            </fileset>
        </copy>

        <move file="${debian.target.dir}/lib/libunix-0.5.1.so"
              tofile="${debian.target.dir}/lib/libunix-java.so"/>

        <copy todir="${debian.target.dir}">
            <filelist dir="." files="build.xml"/>
            <filelist dir="." files="jigasi.sh"/>
            <filelist dir="." files="pom.xml"/>
            <filelist dir="." files="jigasi.jar"/>
            <filelist dir="script" files="graceful_shutdown.sh"/>
            <filelist dir="script" files="collect-dump-logs.sh"/>
        </copy>
        <chmod file="${debian.target.dir}/jigasi.sh" perm="+x"/>
        <chmod file="${debian.target.dir}/graceful_shutdown.sh" perm="+x"/>
        <chmod file="${debian.target.dir}/collect-dump-logs.sh" perm="+x"/>

        <copy file="debian/changelog.tmpl"
              tofile="${debian.target.dir}/debian/changelog"
              overwrite="true"/>
        <tstamp>
            <format property="date"
                    pattern="EEE, d MMM yyyy HH:mm:ss Z" locale="en,US"/>
        </tstamp>
        <replace file="${debian.target.dir}/debian/changelog"
                 token="_DATE_" value="${date}"/>
        <replace file="${debian.target.dir}/debian/changelog"
                 token="_VERSION_" value="${label}"/>
    </target>
    <target name="copy-runtime-dependencies-from-maven">
        <delete failonerror="false" includeemptydirs="true">
            <fileset file="lib/*.jar" />
        </delete>
        <copy todir="lib">
            <fileset refid="runtime.fileset" />
            <mapper type="flatten" />
        </copy>
        <!-- clear smack debug from the resulting libs included
             in the deb package, fails to start in headless mode -->
        <delete failonerror="false">
            <fileset file="lib/smack-debug*.jar" />
        </delete>
    </target>

</project>
